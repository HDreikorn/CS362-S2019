Testing adventurerAction.
RANDOM TESTS.
Tests complete.
Function 'sea_hag_effect'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'ambassador_effect'
Lines executed:0.00% of 22
Branches executed:0.00% of 26
Taken at least once:0.00% of 26
Calls executed:0.00% of 3

Function 'great_hall_effect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'smithy_effect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:3.68% of 190
Branches executed:14.84% of 155
Taken at least once:1.29% of 155
Calls executed:3.33% of 60

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:23.48% of 558
Branches executed:25.30% of 415
Taken at least once:18.07% of 415
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

Testing greatHallAction.
RANDOM TESTS.
Tests complete.FAILS: 0
Function 'sea_hag_effect'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'ambassador_effect'
Lines executed:0.00% of 22
Branches executed:0.00% of 26
Taken at least once:0.00% of 26
Calls executed:0.00% of 3

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'smithy_effect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.21% of 190
Branches executed:14.84% of 155
Taken at least once:1.94% of 155
Calls executed:5.00% of 60

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:26.70% of 558
Branches executed:26.75% of 415
Taken at least once:19.28% of 415
Calls executed:15.79% of 95
Creating 'dominion.c.gcov'

Testing Salvager Action.
RANDOM TESTS.
Choice card: 24, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Choice card: 17, pre buys: 1 post pre card effect buys: 1
Choice card: 4, pre buys: 1 post pre card effect buys: 1
Choice card: 19, pre buys: 1 post pre card effect buys: 1
Choice card: 8, pre buys: 1 post pre card effect buys: 1
Choice card: 0, pre buys: 1 post pre card effect buys: 1
Choice card: 18, pre buys: 1 post pre card effect buys: 1
Choice card: 22, pre buys: 1 post pre card effect buys: 1
Choice card: 23, pre buys: 1 post pre card effect buys: 1
Choice card: 0, pre buys: 1 post pre card effect buys: 1
Choice card: 10, pre buys: 1 post pre card effect buys: 1
Choice card: 17, pre buys: 1 post pre card effect buys: 1
Choice card: 5, pre buys: 1 post pre card effect buys: 1
Choice card: 5, pre buys: 1 post pre card effect buys: 1
Choice card: 0, pre buys: 1 post pre card effect buys: 1
Choice card: 4, pre buys: 1 post pre card effect buys: 1
Choice card: 20, pre buys: 1 post pre card effect buys: 1
Choice card: 16, pre buys: 1 post pre card effect buys: 1
Choice card: 17, pre buys: 1 post pre card effect buys: 1
Choice card: 7, pre buys: 1 post pre card effect buys: 1
Choice card: 9, pre buys: 1 post pre card effect buys: 1
Choice card: 24, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Choice card: 3, pre buys: 1 post pre card effect buys: 1
Choice card: 23, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Choice card: 15, pre buys: 1 post pre card effect buys: 1
Choice card: 20, pre buys: 1 post pre card effect buys: 1
Choice card: 10, pre buys: 1 post pre card effect buys: 1
Choice card: 7, pre buys: 1 post pre card effect buys: 1
Choice card: 16, pre buys: 1 post pre card effect buys: 1
Choice card: 8, pre buys: 1 post pre card effect buys: 1
Choice card: 8, pre buys: 1 post pre card effect buys: 1
Choice card: 23, pre buys: 1 post pre card effect buys: 1
Choice card: 0, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Choice card: 18, pre buys: 1 post pre card effect buys: 1
Choice card: 22, pre buys: 1 post pre card effect buys: 1
Choice card: 22, pre buys: 1 post pre card effect buys: 1
Choice card: 21, pre buys: 1 post pre card effect buys: 1
Choice card: 2, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Tests complete.FAILS: 5
Function 'sea_hag_effect'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'ambassador_effect'
Lines executed:0.00% of 22
Branches executed:0.00% of 26
Taken at least once:0.00% of 26
Calls executed:0.00% of 3

Function 'great_hall_effect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurer_effect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'smithy_effect'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:7.37% of 190
Branches executed:16.13% of 155
Taken at least once:3.87% of 155
Calls executed:11.67% of 60

Function 'getCost'
Lines executed:93.33% of 30
Branches executed:100.00% of 28
Taken at least once:92.86% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:33.51% of 558
Branches executed:33.98% of 415
Taken at least once:26.75% of 415
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 78056 returned 100% blocks executed 100%
    78056:    8:int compare(const void* a, const void* b) {
    78056:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
    36527:   10:    return 1;
    41529:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
    15246:   12:    return -1;
    26283:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 88%
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
call    0 returned 100%
        3:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       24:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        9:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       24:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
        -:  145:	}
       48:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        9:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        9:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 314 returned 100% blocks executed 100%
      314:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      314:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      314:  209:  if (state->deckCount[player] < 1)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
      254:  210:    return -1;
       60:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    12199:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    12079:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    12079:  216:    newDeck[newDeckPos] = state->deck[player][card];
    12079:  217:    newDeckPos++;
   907647:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   895568:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    12079:  221:    state->deckCount[player]--;
        -:  222:  }
    12139:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    12079:  224:    state->deck[player][i] = newDeck[i];
    12079:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       60:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 1962 returned 100% blocks executed 100%
     1962:  315:int handCard(int handPos, struct gameState *state) {
     1962:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1962:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 7962 returned 100% blocks executed 100%
     7962:  346:int whoseTurn(struct gameState *state) {
     7962:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 46884 returned 100% blocks executed 100%
    46884:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    46884:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12175:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    12019:  534:      state->deck[player][i] = state->discard[player][i];
    12019:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      156:  538:    state->deckCount[player] = state->discardCount[player];
      156:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      156:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      156:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      156:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      156:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      156:  559:    if (deckCounter == 0)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
      102:  560:      return -1;
        -:  561:
       54:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       54:  563:    state->deckCount[player]--;
       54:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    46728:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    46728:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    46728:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    46728:  576:    state->deckCount[player]--;
    46728:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    46782:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 3924 returned 100% blocks executed 93%
     3924:  583:int getCost(int cardNumber)
        -:  584:{
     3924:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 4%
branch  6 taken 3%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 5%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 3%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
      160:  588:      return 0;
        -:  589:    case estate:
      148:  590:      return 2;
        -:  591:    case duchy:
      164:  592:      return 5;
        -:  593:    case province:
      124:  594:      return 8;
        -:  595:    case copper:
      110:  596:      return 0;
        -:  597:    case silver:
      166:  598:      return 3;
        -:  599:    case gold:
      120:  600:      return 6;
        -:  601:    case adventurer:
      150:  602:      return 6;
        -:  603:    case council_room:
      148:  604:      return 5;
        -:  605:    case feast:
      152:  606:      return 4;
        -:  607:    case gardens:
      176:  608:      return 4;
        -:  609:    case mine:
      142:  610:      return 5;
        -:  611:    case remodel:
      162:  612:      return 4;
        -:  613:    case smithy:
      154:  614:      return 4;
        -:  615:    case village:
      190:  616:      return 3;
        -:  617:    case baron:
      166:  618:      return 4;
        -:  619:    case great_hall:
      142:  620:      return 3;
        -:  621:    case minion:
      108:  622:      return 5;
        -:  623:    case steward:
      170:  624:      return 3;
        -:  625:    case tribute:
      152:  626:      return 5;
        -:  627:    case ambassador:
      150:  628:      return 3;
        -:  629:    case cutpurse:
      154:  630:      return 4;
        -:  631:    case embargo: 
      148:  632:      return 2;
        -:  633:    case outpost:
      144:  634:      return 5;
        -:  635:    case salvager:
      158:  636:      return 4;
        -:  637:    case sea_hag:
      166:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 6000 returned 100% blocks executed 6%
     6000:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     6000:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     6000:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     6000:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     6000:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
     6000:  664:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 33%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 33%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  665:    {
        -:  666:    case adventurer:
     2000:  667:      return adventurer_effect(currentPlayer, state);
call    0 returned 100%
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
    #####:  671:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  672:	{
    #####:  673:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
    #####:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
    #####:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  681:	{
    #####:  682:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  683:	    {
    #####:  684:	      drawCard(i, state);
call    0 never executed
        -:  685:	    }
        -:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
    #####:  689:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  690:			
    #####:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
    #####:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
    #####:  703:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  704:      x = 1;//Condition to loop on
    #####:  705:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  706:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
        -:  713:	}
    #####:  714:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  715:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
        -:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
    #####:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	state->hand[currentPlayer][i] = temphand[i];
    #####:  740:	temphand[i] = -1;
        -:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;
        -:  755:	}
        -:  756:		
    #####:  757:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:
    #####:  762:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  768:
        -:  769:      //discard card from hand
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  771:
        -:  772:      //discard trashed card
    #####:  773:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  776:	    {
    #####:  777:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  778:	      break;
        -:  779:	    }
        -:  780:	}
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case remodel:
    #####:  785:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:
        -:  807:
    #####:  808:      return 0;
        -:  809:		
        -:  810:    case smithy:
    #####:  811:      return smithy_effect(currentPlayer,state,handPos);
call    0 never executed
        -:  812:		
        -:  813:    case village:
        -:  814:      //+1 Card
    #####:  815:      drawCard(currentPlayer, state);
call    0 never executed
        -:  816:			
        -:  817:      //+2 Actions
    #####:  818:      state->numActions = state->numActions + 2;
        -:  819:			
        -:  820:      //discard played card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  822:      return 0;
        -:  823:		
        -:  824:    case baron:
    #####:  825:      state->numBuys++;//Increase buys by 1!
    #####:  826:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  827:	int p = 0;//Iterator for hand!
    #####:  828:	int card_not_discarded = 1;//Flag for discard set!
    #####:  829:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  830:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  831:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  832:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  833:	    state->discardCount[currentPlayer]++;
    #####:  834:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  835:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  836:	    }
    #####:  837:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  838:	    state->handCount[currentPlayer]--;
    #####:  839:	    card_not_discarded = 0;//Exit the loop
        -:  840:	  }
    #####:  841:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  842:	    if(DEBUG) {
        -:  843:	      printf("No estate cards in your hand, invalid choice\n");
        -:  844:	      printf("Must gain an estate if there are any\n");
        -:  845:	    }
    #####:  846:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  848:	      state->supplyCount[estate]--;//Decrement estates
    #####:  849:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  850:		isGameOver(state);
call    0 never executed
        -:  851:	      }
        -:  852:	    }
    #####:  853:	    card_not_discarded = 0;//Exit the loop
        -:  854:	  }
        -:  855:			    
        -:  856:	  else{
    #####:  857:	    p++;//Next card
        -:  858:	  }
        -:  859:	}
        -:  860:      }
        -:  861:			    
        -:  862:      else{
    #####:  863:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  865:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  866:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  867:	    isGameOver(state);
call    0 never executed
        -:  868:	  }
        -:  869:	}
        -:  870:      }
        -:  871:	    
        -:  872:      
    #####:  873:      return 0;
        -:  874:		
        -:  875:    case great_hall:
     2000:  876:      return great_hall_effect(currentPlayer,state, handPos);
call    0 returned 100%
        -:  877:		
        -:  878:    case minion:
        -:  879:      //+1 action
    #####:  880:      state->numActions++;
        -:  881:			
        -:  882:      //discard card from hand
    #####:  883:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  884:			
    #####:  885:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  886:	{
    #####:  887:	  state->coins = state->coins + 2;
        -:  888:	}
        -:  889:			
    #####:  890:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  891:	{
        -:  892:	  //discard hand
    #####:  893:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  894:	    {
    #####:  895:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  896:	    }
        -:  897:				
        -:  898:	  //draw 4
    #####:  899:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  900:	    {
    #####:  901:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  902:	    }
        -:  903:				
        -:  904:	  //other players discard hand and redraw if hand size > 4
    #####:  905:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  906:	    {
    #####:  907:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  908:		{
    #####:  909:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  910:		    {
        -:  911:		      //discard hand
    #####:  912:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  913:			{
    #####:  914:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  915:			}
        -:  916:							
        -:  917:		      //draw 4
    #####:  918:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  919:			{
    #####:  920:			  drawCard(i, state);
call    0 never executed
        -:  921:			}
        -:  922:		    }
        -:  923:		}
        -:  924:	    }
        -:  925:				
        -:  926:	}
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case steward:
    #####:  930:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  931:	{
        -:  932:	  //+2 cards
    #####:  933:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  934:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  935:	}
    #####:  936:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  937:	{
        -:  938:	  //+2 coins
    #####:  939:	  state->coins = state->coins + 2;
        -:  940:	}
        -:  941:      else
        -:  942:	{
        -:  943:	  //trash 2 cards in hand
    #####:  944:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  945:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  946:	}
        -:  947:			
        -:  948:      //discard card from hand
    #####:  949:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  950:      return 0;
        -:  951:		
        -:  952:    case tribute:
    #####:  953:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  954:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  955:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  956:	  state->deckCount[nextPlayer]--;
        -:  957:	}
    #####:  958:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  959:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  960:	  state->discardCount[nextPlayer]--;
        -:  961:	}
        -:  962:	else{
        -:  963:	  //No Card to Reveal
        -:  964:	  if (DEBUG){
        -:  965:	    printf("No cards to reveal\n");
        -:  966:	  }
        -:  967:	}
        -:  968:      }
        -:  969:	    
        -:  970:      else{
    #####:  971:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  972:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  973:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  974:	    state->deckCount[nextPlayer]++;
    #####:  975:	    state->discard[nextPlayer][i] = -1;
    #####:  976:	    state->discardCount[nextPlayer]--;
        -:  977:	  }
        -:  978:			    
    #####:  979:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  980:	} 
    #####:  981:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  982:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  983:	state->deckCount[nextPlayer]--;
    #####:  984:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  985:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  986:	state->deckCount[nextPlayer]--;
        -:  987:      }    
        -:  988:		       
    #####:  989:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  990:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  991:	state->playedCardCount++;
    #####:  992:	tributeRevealedCards[1] = -1;
        -:  993:      }
        -:  994:
    #####:  995:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  996:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  997:	  state->coins += 2;
        -:  998:	}
        -:  999:		    
    #####: 1000:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1002:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1003:	}
        -: 1004:	else{//Action Card
    #####: 1005:	  state->numActions = state->numActions + 2;
        -: 1006:	}
        -: 1007:      }
        -: 1008:	    
    #####: 1009:      return 0;
        -: 1010:		
        -: 1011:    case ambassador:
    #####: 1012:      return ambassador_effect(choice1,choice2, currentPlayer, state, handPos);
call    0 never executed
        -: 1013:		
        -: 1014:    case cutpurse:
        -: 1015:
    #####: 1016:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1017:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:	    {
    #####: 1021:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1022:		{
    #####: 1023:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1024:		    {
    #####: 1025:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1026:		      break;
        -: 1027:		    }
    #####: 1028:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
        -: 1032:			  if (DEBUG)
        -: 1033:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1034:			}	
    #####: 1035:		      break;
        -: 1036:		    }		
        -: 1037:		}
        -: 1038:					
        -: 1039:	    }
        -: 1040:				
        -: 1041:	}				
        -: 1042:
        -: 1043:      //discard played card from hand
    #####: 1044:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1045:
    #####: 1046:      return 0;
        -: 1047:
        -: 1048:		
        -: 1049:    case embargo: 
        -: 1050:      //+2 Coins
    #####: 1051:      state->coins = state->coins + 2;
        -: 1052:			
        -: 1053:      //see if selected pile is in play
    #####: 1054:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1055:	{
    #####: 1056:	  return -1;
        -: 1057:	}
        -: 1058:			
        -: 1059:      //add embargo token to selected supply pile
    #####: 1060:      state->embargoTokens[choice1]++;
        -: 1061:			
        -: 1062:      //trash card
    #####: 1063:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case outpost:
        -: 1067:      //set outpost flag
    #####: 1068:      state->outpostPlayed++;
        -: 1069:			
        -: 1070:      //discard card
    #####: 1071:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case salvager:
        -: 1075:      //+1 buy
     2000: 1076:      state->numBuys++;
        -: 1077:			
     2000: 1078:      if (choice1)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -: 1079:	{
        -: 1080:	  //gain coins equal to trashed card
     1962: 1081:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1082:	  //trash card
     1962: 1083:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1084:	}
        -: 1085:			
        -: 1086:      //discard card
     2000: 1087:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2000: 1088:      return 0;
        -: 1089:		
        -: 1090:    case sea_hag:
    #####: 1091:      return sea_hag_effect(currentPlayer, state);
call    0 never executed
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
function discardCard called 5962 returned 100% blocks executed 100%
     5962: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
     5962: 1131:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1132:    {
        -: 1133:      //add card to played pile
     4000: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4000: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
     5962: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
     5962: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
       64: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
     5898: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
        2: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
     5896: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
     5896: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
     5896: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
     5962: 1162:  return 0;
        -: 1163:}
        -: 1164:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1170:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1171:    {
    #####: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
    #####: 1180:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1181:    {
    #####: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
    #####: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
    #####: 1199:  return 0;
        -: 1200:}
        -: 1201:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
        3: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
       18: 1210:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1211:    {
       15: 1212:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1213:	{
       12: 1214:	  state->coins += 1;
        -: 1215:	}
        3: 1216:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
        3: 1220:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
        3: 1227:  state->coins += bonus;
        -: 1228:
        3: 1229:  return 0;
        -: 1230:}
        -: 1231:
        -: 1232:/******************************************************************************
        -: 1233:begin refactor card effects
        -: 1234:******************************************************************************/
        -: 1235://handles card effect for Smithy card
function smithy_effect called 0 returned 0% blocks executed 0%
    #####: 1236:int smithy_effect(int currentPlayer, struct gameState* state, int handPos)
        -: 1237:{
        -: 1238:	//+3 Cards
    #####: 1239:	for (int i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1242:	}
        -: 1243:
        -: 1244:	//discard card from hand
    #####: 1245:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1246:
    #####: 1247:	return 0;
        -: 1248:}
        -: 1249:
        -: 1250://handles card effect for Adventurer card
function adventurer_effect called 2000 returned 100% blocks executed 100%
     2000: 1251:int adventurer_effect(int currentPlayer, struct gameState* state)
        -: 1252:{
     2000: 1253:	int drawntreasure = 0;
        -: 1254:	int temphand[MAX_HAND];
     2000: 1255:	int z = 0;
        -: 1256:	int cardDrawn;
        -: 1257:
    48869: 1258:	while (drawntreasure < 2) 
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1259:	{
    44869: 1260:		if (state->deckCount[currentPlayer] < 1) 
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1261:		{//if the deck is empty we need to shuffle discard and add to deck
      152: 1262:			shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1263:		}
    44869: 1264:		drawCard(currentPlayer, state);
call    0 returned 100%
    44869: 1265:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    44869: 1266:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
        -: 1267:		{
     4000: 1268:			drawntreasure++;
        -: 1269:		}
        -: 1270:		else 
        -: 1271:		{
    40869: 1272:			temphand[z] = cardDrawn;
    40869: 1273:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    40869: 1274:			z++;
        -: 1275:		}
        -: 1276:	}
    46869: 1277:	while (z >= 0) 
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1278:	{
    42869: 1279:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    42869: 1280:		z = z - 1;
        -: 1281:	}
        -: 1282:
     2000: 1283:	return 0;
        -: 1284:}
        -: 1285:
        -: 1286://handles card effect for Great Hall card
function great_hall_effect called 2000 returned 100% blocks executed 100%
     2000: 1287:int great_hall_effect(int currentPlayer, struct gameState* state, int handPos)
        -: 1288:{
        -: 1289:	//+1 Card
     2000: 1290:	drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1291:
        -: 1292:	//+1 Actions
     2000: 1293:	state->numActions++;
        -: 1294:	//state->numActions++;
        -: 1295:
        -: 1296:	//discard card from hand
     2000: 1297:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1298:
     2000: 1299:	return 0;
        -: 1300:}
        -: 1301:
        -: 1302://handles card effect for Ambassador card
function ambassador_effect called 0 returned 0% blocks executed 0%
    #####: 1303:int ambassador_effect(int choice1, int choice2, int currentPlayer, struct gameState* state, int handPos)
        -: 1304:{
    #####: 1305:	int j = 0;		//used to check if player has enough cards to discard
        -: 1306:
    #####: 1307:	if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1308:	{
    #####: 1309:		return -1;
        -: 1310:	}
        -: 1311:
    #####: 1312:	if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1313:	{
    #####: 1314:		return -1;
        -: 1315:	}
        -: 1316:
    #####: 1317:	for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1318:	{
    #####: 1319:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1320:		{
    #####: 1321:			j++;
        -: 1322:		}
        -: 1323:	}
    #####: 1324:	if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1325:	{
    #####: 1326:		return -1;
        -: 1327:	}
        -: 1328:
        -: 1329:	if (DEBUG)
        -: 1330:	{
        -: 1331:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1332:	}
        -: 1333:
        -: 1334:	//increase supply count for choosen card by amount being discarded
    #####: 1335:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1336:
        -: 1337:	//each other player gains a copy of revealed card
    #####: 1338:	for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:	{
    #####: 1340:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1341:		{
    #####: 1342:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1343:		}
        -: 1344:	}
        -: 1345:
        -: 1346:	//discard played card from hand
    #####: 1347:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1348:
        -: 1349:	//trash copies of cards returned to supply
    #####: 1350:	for (int j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1351:	{
    #####: 1352:		for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1353:		{
    #####: 1354:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1355:			{
    #####: 1356:				discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1357:				break;
        -: 1358:			}
        -: 1359:		}
        -: 1360:	}
        -: 1361:
    #####: 1362:	return 0;
        -: 1363:}
        -: 1364:
        -: 1365://handles card effect for Sea Hag card
function sea_hag_effect called 0 returned 0% blocks executed 0%
    #####: 1366:int sea_hag_effect(int currentPlayer, struct gameState* state)
        -: 1367:{
    #####: 1368:	for (int i = 0; i < state->numPlayers; i++) 
branch  0 never executed
branch  1 never executed
        -: 1369:	{
    #####: 1370:		state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1371:		state->deckCount[i]--;
    #####: 1372:		state->discardCount[i]++;
    #####: 1373:		state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1374:	}
        -: 1375:
    #####: 1376:	return 0;
        -: 1377:}
        -: 1378:
        -: 1379://end of dominion.c
