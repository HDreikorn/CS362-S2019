Testing adventurerAction.
RANDOM TESTS.
Tests complete.
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:3.81% of 210
Branches executed:12.85% of 179
Taken at least once:1.12% of 179
Calls executed:3.45% of 58

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'adventurerAction'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'smithyAction'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'councilRoomAction'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'villageAction'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'greatHallAction'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

File 'dominion.c'
Lines executed:23.45% of 563
Branches executed:25.18% of 417
Taken at least once:17.99% of 417
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

Testing greatHallAction.
RANDOM TESTS.
Tests complete.FAILS: 0
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:4.76% of 210
Branches executed:12.85% of 179
Taken at least once:1.68% of 179
Calls executed:5.17% of 58

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'adventurerAction'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'smithyAction'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'councilRoomAction'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'villageAction'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'greatHallAction'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

File 'dominion.c'
Lines executed:26.82% of 563
Branches executed:26.62% of 417
Taken at least once:19.18% of 417
Calls executed:15.79% of 95
Creating 'dominion.c.gcov'

Testing Salvager Action.
RANDOM TESTS.
Choice card: 24, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Choice card: 17, pre buys: 1 post pre card effect buys: 1
Choice card: 4, pre buys: 1 post pre card effect buys: 1
Choice card: 19, pre buys: 1 post pre card effect buys: 1
Choice card: 8, pre buys: 1 post pre card effect buys: 1
Choice card: 0, pre buys: 1 post pre card effect buys: 1
Choice card: 18, pre buys: 1 post pre card effect buys: 1
Choice card: 22, pre buys: 1 post pre card effect buys: 1
Choice card: 23, pre buys: 1 post pre card effect buys: 1
Choice card: 0, pre buys: 1 post pre card effect buys: 1
Choice card: 10, pre buys: 1 post pre card effect buys: 1
Choice card: 17, pre buys: 1 post pre card effect buys: 1
Choice card: 5, pre buys: 1 post pre card effect buys: 1
Choice card: 5, pre buys: 1 post pre card effect buys: 1
Choice card: 0, pre buys: 1 post pre card effect buys: 1
Choice card: 4, pre buys: 1 post pre card effect buys: 1
Choice card: 20, pre buys: 1 post pre card effect buys: 1
Choice card: 16, pre buys: 1 post pre card effect buys: 1
Choice card: 17, pre buys: 1 post pre card effect buys: 1
Choice card: 7, pre buys: 1 post pre card effect buys: 1
Choice card: 9, pre buys: 1 post pre card effect buys: 1
Choice card: 24, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Choice card: 3, pre buys: 1 post pre card effect buys: 1
Choice card: 23, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Choice card: 15, pre buys: 1 post pre card effect buys: 1
Choice card: 20, pre buys: 1 post pre card effect buys: 1
Choice card: 10, pre buys: 1 post pre card effect buys: 1
Choice card: 7, pre buys: 1 post pre card effect buys: 1
Choice card: 16, pre buys: 1 post pre card effect buys: 1
Choice card: 8, pre buys: 1 post pre card effect buys: 1
Choice card: 8, pre buys: 1 post pre card effect buys: 1
Choice card: 23, pre buys: 1 post pre card effect buys: 1
Choice card: 0, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Choice card: 18, pre buys: 1 post pre card effect buys: 1
Choice card: 22, pre buys: 1 post pre card effect buys: 1
Choice card: 22, pre buys: 1 post pre card effect buys: 1
Choice card: 21, pre buys: 1 post pre card effect buys: 1
Choice card: 2, pre buys: 1 post pre card effect buys: 1
FAIL BUYS - pre: 2, post: -1, choice1: 0, pre HC: 0, post HC: -1
Tests complete.FAILS: 5
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'cardEffect'
Lines executed:7.62% of 210
Branches executed:13.97% of 179
Taken at least once:3.35% of 179
Calls executed:12.07% of 58

Function 'getCost'
Lines executed:93.33% of 30
Branches executed:100.00% of 28
Taken at least once:92.86% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'adventurerAction'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'smithyAction'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 2

Function 'councilRoomAction'
Lines executed:0.00% of 9
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'villageAction'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'greatHallAction'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

File 'dominion.c'
Lines executed:33.57% of 563
Branches executed:33.81% of 417
Taken at least once:26.62% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function greatHallAction called 2000 returned 100% blocks executed 100%
     2000:    8:void greatHallAction(int currentPlayer, struct gameState *state, int handPos) {
        -:    9:  //+1 Card
     2000:   10:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:   11:  
        -:   12:  //+1 Actions
     2000:   13:  state->numActions++;
        -:   14:  
        -:   15:  //discard card from hand
     2000:   16:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2000:   17:}
        -:   18:
function villageAction called 0 returned 0% blocks executed 0%
    #####:   19:void villageAction(int currentPlayer, struct gameState *state, int handPos) {
        -:   20:  //+1 Card
    #####:   21:  drawCard(currentPlayer, state);
call    0 never executed
        -:   22:  
        -:   23:  //+2 Actions
    #####:   24:  state->numActions = state->numActions + 1;
        -:   25:  
        -:   26:  //discard played card from hand
    #####:   27:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   28:}
        -:   29:
function councilRoomAction called 0 returned 0% blocks executed 0%
    #####:   30:void councilRoomAction(int currentPlayer, struct gameState *state, int handPos) {
        -:   31:  int i;
        -:   32:  //+4 Cards
    #####:   33:  for (i = 0; i <= 4; i++)
branch  0 never executed
branch  1 never executed
        -:   34:	{
    #####:   35:	  drawCard(currentPlayer, state);
call    0 never executed
        -:   36:	}
        -:   37:			
        -:   38:  //+1 Buy
    #####:   39:  state->numBuys++;
        -:   40:  
        -:   41:  //Each other player draws a card
    #####:   42:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:   43:	{
    #####:   44:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:   45:	    {
    #####:   46:	      drawCard(i, state);
call    0 never executed
        -:   47:	    }
        -:   48:	}
        -:   49:			
        -:   50:  //put played card in played card pile
    #####:   51:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   52:}
        -:   53:
function smithyAction called 0 returned 0% blocks executed 0%
    #####:   54:void smithyAction(int currentPlayer, struct gameState *state, int handPos) {
        -:   55:  //+3 Cards
        -:   56:  int i;
    #####:   57:  for (i = 1; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:   58:	{
    #####:   59:	  drawCard(currentPlayer, state);
call    0 never executed
        -:   60:	}
        -:   61:			
        -:   62:  //discard card from hand
    #####:   63:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   64:}
        -:   65:
function adventurerAction called 2000 returned 100% blocks executed 100%
     2000:   66:void adventurerAction(int currentPlayer, struct gameState *state) {
        -:   67:  int temphand[MAX_HAND];
     2000:   68:  int drawntreasure=0;
        -:   69:  int cardDrawn;
     2000:   70:  int z = 0;
        -:   71:
    48869:   72:  while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    44869:   73:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      152:   74:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:   75:	}
    44869:   76:	drawCard(currentPlayer, state);
call    0 returned 100%
    44869:   77:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    44869:   78:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
     4000:   79:	  drawntreasure++;
        -:   80:	else{
    40869:   81:	  temphand[z]=cardDrawn;
    40869:   82:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    40869:   83:	  z++;
        -:   84:	}
        -:   85:      }
    44869:   86:      while(z-1>=0){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
    40869:   87:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    40869:   88:	z=z-1;
        -:   89:      }
     2000:   90:}
        -:   91:
function compare called 78038 returned 100% blocks executed 100%
    78038:   92:int compare(const void* a, const void* b) {
    78038:   93:  if (*(int*)a > *(int*)b)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
    36506:   94:    return 1;
    41532:   95:  if (*(int*)a < *(int*)b)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
    15416:   96:    return -1;
    26116:   97:  return 0;
        -:   98:}
        -:   99:
function newGame called 0 returned 0% blocks executed 0%
    #####:  100:struct gameState* newGame() {
    #####:  101:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  102:  return g;
        -:  103:}
        -:  104:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  105:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  106:		  int k8, int k9, int k10) {
    #####:  107:  int* k = malloc(10 * sizeof(int));
    #####:  108:  k[0] = k1;
    #####:  109:  k[1] = k2;
    #####:  110:  k[2] = k3;
    #####:  111:  k[3] = k4;
    #####:  112:  k[4] = k5;
    #####:  113:  k[5] = k6;
    #####:  114:  k[6] = k7;
    #####:  115:  k[7] = k8;
    #####:  116:  k[8] = k9;
    #####:  117:  k[9] = k10;
    #####:  118:  return k;
        -:  119:}
        -:  120:
function initializeGame called 3 returned 100% blocks executed 88%
        3:  121:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  122:		   struct gameState *state) {
        -:  123:
        -:  124:  int i;
        -:  125:  int j;
        -:  126:  int it;			
        -:  127:  //set up random number generator
        3:  128:  SelectStream(1);
call    0 returned 100%
        3:  129:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  130:  
        -:  131:  //check number of players
        3:  132:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  133:    {
    #####:  134:      return -1;
        -:  135:    }
        -:  136:
        -:  137:  //set number of players
        3:  138:  state->numPlayers = numPlayers;
        -:  139:
        -:  140:  //check selected kingdom cards are different
       33:  141:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  142:    {
      330:  143:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  144:        {
      300:  145:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  146:	    {
    #####:  147:	      return -1;
        -:  148:	    }
        -:  149:        }
        -:  150:    }
        -:  151:
        -:  152:
        -:  153:  //initialize supply
        -:  154:  ///////////////////////////////
        -:  155:
        -:  156:  //set number of Curse cards
        3:  157:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  158:    {
        3:  159:      state->supplyCount[curse] = 10;
        -:  160:    }
    #####:  161:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  162:    {
    #####:  163:      state->supplyCount[curse] = 20;
        -:  164:    }
        -:  165:  else
        -:  166:    {
    #####:  167:      state->supplyCount[curse] = 30;
        -:  168:    }
        -:  169:
        -:  170:  //set number of Victory cards
        3:  171:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  172:    {
        3:  173:      state->supplyCount[estate] = 8;
        3:  174:      state->supplyCount[duchy] = 8;
        3:  175:      state->supplyCount[province] = 8;
        -:  176:    }
        -:  177:  else
        -:  178:    {
    #####:  179:      state->supplyCount[estate] = 12;
    #####:  180:      state->supplyCount[duchy] = 12;
    #####:  181:      state->supplyCount[province] = 12;
        -:  182:    }
        -:  183:
        -:  184:  //set number of Treasure cards
        3:  185:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  186:  state->supplyCount[silver] = 40;
        3:  187:  state->supplyCount[gold] = 30;
        -:  188:
        -:  189:  //set number of Kingdom cards
       63:  190:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  191:    {
      495:  192:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  193:	{
      465:  194:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  195:	    {
        -:  196:	      //check if card is a 'Victory' Kingdom card
       30:  197:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  198:		{
       12:  199:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  200:		    state->supplyCount[i] = 8; 
        -:  201:		  }
    #####:  202:		  else{ state->supplyCount[i] = 12; }
        -:  203:		}
        -:  204:	      else
        -:  205:		{
       24:  206:		  state->supplyCount[i] = 10;
        -:  207:		}
       30:  208:	      break;
        -:  209:	    }
        -:  210:	  else    //card is not in the set choosen for the game
        -:  211:	    {
      435:  212:	      state->supplyCount[i] = -1;
        -:  213:	    }
        -:  214:	}
        -:  215:
        -:  216:    }
        -:  217:
        -:  218:  ////////////////////////
        -:  219:  //supply intilization complete
        -:  220:
        -:  221:  //set player decks
        9:  222:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  223:    {
        6:  224:      state->deckCount[i] = 0;
       24:  225:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  226:	{
       18:  227:	  state->deck[i][j] = estate;
       18:  228:	  state->deckCount[i]++;
        -:  229:	}
       48:  230:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  231:	{
       42:  232:	  state->deck[i][j] = copper;
       42:  233:	  state->deckCount[i]++;		
        -:  234:	}
        -:  235:    }
        -:  236:
        -:  237:  //shuffle player decks
        9:  238:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  239:    {
        6:  240:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  241:	{
    #####:  242:	  return -1;
        -:  243:	}
        -:  244:    }
        -:  245:
        -:  246:  //draw player hands
        9:  247:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  248:    {  
        -:  249:      //initialize hand size to zero
        6:  250:      state->handCount[i] = 0;
        6:  251:      state->discardCount[i] = 0;
        -:  252:      //draw 5 cards
        -:  253:      // for (j = 0; j < 5; j++)
        -:  254:      //	{
        -:  255:      //	  drawCard(i, state);
        -:  256:      //	}
        -:  257:    }
        -:  258:  
        -:  259:  //set embargo tokens to 0 for all supply piles
       84:  260:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  261:    {
       81:  262:      state->embargoTokens[i] = 0;
        -:  263:    }
        -:  264:
        -:  265:  //initialize first player's turn
        3:  266:  state->outpostPlayed = 0;
        3:  267:  state->phase = 0;
        3:  268:  state->numActions = 1;
        3:  269:  state->numBuys = 1;
        3:  270:  state->playedCardCount = 0;
        3:  271:  state->whoseTurn = 0;
        3:  272:  state->handCount[state->whoseTurn] = 0;
        -:  273:  //int it; move to top
        -:  274:
        -:  275:  //Moved draw cards to here, only drawing at the start of a turn
       18:  276:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  277:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  278:  }
        -:  279:
        3:  280:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  281:
        3:  282:  return 0;
        -:  283:}
        -:  284:
function shuffle called 314 returned 100% blocks executed 100%
      314:  285:int shuffle(int player, struct gameState *state) {
        -:  286: 
        -:  287:
        -:  288:  int newDeck[MAX_DECK];
      314:  289:  int newDeckPos = 0;
        -:  290:  int card;
        -:  291:  int i;
        -:  292:
      314:  293:  if (state->deckCount[player] < 1)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
      254:  294:    return -1;
       60:  295:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  296:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  297:
    12199:  298:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    12079:  299:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    12079:  300:    newDeck[newDeckPos] = state->deck[player][card];
    12079:  301:    newDeckPos++;
   907647:  302:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   895568:  303:      state->deck[player][i] = state->deck[player][i+1];
        -:  304:    }
    12079:  305:    state->deckCount[player]--;
        -:  306:  }
    12139:  307:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    12079:  308:    state->deck[player][i] = newDeck[i];
    12079:  309:    state->deckCount[player]++;
        -:  310:  }
        -:  311:
       60:  312:  return 0;
        -:  313:}
        -:  314:
function playCard called 0 returned 0% blocks executed 0%
    #####:  315:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  316:{	
        -:  317:  int card;
    #####:  318:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  319:
        -:  320:  //check if it is the right phase
    #####:  321:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  322:    {
    #####:  323:      return -1;
        -:  324:    }
        -:  325:	
        -:  326:  //check if player has enough actions
    #####:  327:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      return -1;
        -:  330:    }
        -:  331:	
        -:  332:  //get card played
    #####:  333:  card = handCard(handPos, state);
call    0 never executed
        -:  334:	
        -:  335:  //check if selected card is an action
    #####:  336:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  337:    {
    #####:  338:      return -1;
        -:  339:    }
        -:  340:	
        -:  341:  //play card
    #####:  342:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  343:    {
    #####:  344:      return -1;
        -:  345:    }
        -:  346:	
        -:  347:  //reduce number of actions
    #####:  348:  state->numActions--;
        -:  349:
        -:  350:  //update coins (Treasure cards may be added with card draws)
    #####:  351:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  352:	
    #####:  353:  return 0;
        -:  354:}
        -:  355:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  356:int buyCard(int supplyPos, struct gameState *state) {
        -:  357:  int who;
        -:  358:  if (DEBUG){
        -:  359:    printf("Entering buyCard...\n");
        -:  360:  }
        -:  361:
        -:  362:  // I don't know what to do about the phase thing.
        -:  363:
    #####:  364:  who = state->whoseTurn;
        -:  365:
    #####:  366:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  367:    if (DEBUG)
        -:  368:      printf("You do not have any buys left\n");
    #####:  369:    return -1;
    #####:  370:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  371:    if (DEBUG)
        -:  372:      printf("There are not any of that type of card left\n");
    #####:  373:    return -1;
    #####:  374:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  375:    if (DEBUG) 
        -:  376:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  377:    return -1;
        -:  378:  } else {
    #####:  379:    state->phase=1;
        -:  380:    //state->supplyCount[supplyPos]--;
    #####:  381:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  382:  
    #####:  383:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  384:    state->numBuys--;
        -:  385:    if (DEBUG)
        -:  386:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  387:  }
        -:  388:
        -:  389:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  390:  //state->discardCount[who]++;
        -:  391:    
    #####:  392:  return 0;
        -:  393:}
        -:  394:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  395:int numHandCards(struct gameState *state) {
    #####:  396:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  397:}
        -:  398:
function handCard called 1962 returned 100% blocks executed 100%
     1962:  399:int handCard(int handPos, struct gameState *state) {
     1962:  400:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1962:  401:  return state->hand[currentPlayer][handPos];
        -:  402:}
        -:  403:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  404:int supplyCount(int card, struct gameState *state) {
    #####:  405:  return state->supplyCount[card];
        -:  406:}
        -:  407:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  408:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  409:  int i;
    #####:  410:  int count = 0;
        -:  411:
    #####:  412:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  415:    }
        -:  416:
    #####:  417:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  418:    {
    #####:  419:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  420:    }
        -:  421:
    #####:  422:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  425:    }
        -:  426:
    #####:  427:  return count;
        -:  428:}
        -:  429:
function whoseTurn called 7962 returned 100% blocks executed 100%
     7962:  430:int whoseTurn(struct gameState *state) {
     7962:  431:  return state->whoseTurn;
        -:  432:}
        -:  433:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  434:int endTurn(struct gameState *state) {
        -:  435:  int k;
        -:  436:  int i;
    #####:  437:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  438:  
        -:  439:  //Discard hand
    #####:  440:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  441:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  442:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  443:  }
    #####:  444:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  445:    
        -:  446:  //Code for determining the player
    #####:  447:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  448:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  449:  }
        -:  450:  else{
    #####:  451:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  452:  }
        -:  453:
    #####:  454:  state->outpostPlayed = 0;
    #####:  455:  state->phase = 0;
    #####:  456:  state->numActions = 1;
    #####:  457:  state->coins = 0;
    #####:  458:  state->numBuys = 1;
    #####:  459:  state->playedCardCount = 0;
    #####:  460:  state->handCount[state->whoseTurn] = 0;
        -:  461:
        -:  462:  //int k; move to top
        -:  463:  //Next player draws hand
    #####:  464:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  465:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  466:  }
        -:  467:
        -:  468:  //Update money
    #####:  469:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  470:
    #####:  471:  return 0;
        -:  472:}
        -:  473:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  474:int isGameOver(struct gameState *state) {
        -:  475:  int i;
        -:  476:  int j;
        -:  477:	
        -:  478:  //if stack of Province cards is empty, the game ends
    #####:  479:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      return 1;
        -:  482:    }
        -:  483:
        -:  484:  //if three supply pile are at 0, the game ends
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j++;
        -:  491:	}
        -:  492:    }
    #####:  493:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      return 1;
        -:  496:    }
        -:  497:
    #####:  498:  return 0;
        -:  499:}
        -:  500:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  501:int scoreFor (int player, struct gameState *state) {
        -:  502:
        -:  503:  int i;
    #####:  504:  int score = 0;
        -:  505:  //score from hand
    #####:  506:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  509:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  510:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  511:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  512:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  513:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  514:    }
        -:  515:
        -:  516:  //score from discard
    #####:  517:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  520:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  521:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  522:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  523:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  524:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  525:    }
        -:  526:
        -:  527:  //score from deck
    #####:  528:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  531:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  532:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  533:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  534:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  535:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  536:    }
        -:  537:
    #####:  538:  return score;
        -:  539:}
        -:  540:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  541:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  542:  int i;	
        -:  543:  int j;
        -:  544:  int highScore;
        -:  545:  int currentPlayer;
        -:  546:
        -:  547:  //get score for each player
    #####:  548:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
        -:  550:      //set unused player scores to -9999
    #####:  551:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  552:	{
    #####:  553:	  players[i] = -9999;
        -:  554:	}
        -:  555:      else
        -:  556:	{
    #####:  557:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  558:	}
        -:  559:    }
        -:  560:
        -:  561:  //find highest score
    #####:  562:  j = 0;
    #####:  563:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  564:    {
    #####:  565:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  566:	{
    #####:  567:	  j = i;
        -:  568:	}
        -:  569:    }
    #####:  570:  highScore = players[j];
        -:  571:
        -:  572:  //add 1 to players who had less turns
    #####:  573:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  574:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  575:    {
    #####:  576:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  577:	{
    #####:  578:	  players[i]++;
        -:  579:	}
        -:  580:    }
        -:  581:
        -:  582:  //find new highest score
    #####:  583:  j = 0;
    #####:  584:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  585:    {
    #####:  586:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  587:	{
    #####:  588:	  j = i;
        -:  589:	}
        -:  590:    }
    #####:  591:  highScore = players[j];
        -:  592:
        -:  593:  //set winners in array to 1 and rest to 0
    #####:  594:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  595:    {
    #####:  596:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  597:	{
    #####:  598:	  players[i] = 1;
        -:  599:	}
        -:  600:      else
        -:  601:	{
    #####:  602:	  players[i] = 0;
        -:  603:	}
        -:  604:    }
        -:  605:
    #####:  606:  return 0;
        -:  607:}
        -:  608:
function drawCard called 46884 returned 100% blocks executed 100%
    46884:  609:int drawCard(int player, struct gameState *state)
        -:  610:{	int count;
        -:  611:  int deckCounter;
    46884:  612:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  613:    
        -:  614:    //Step 1 Shuffle the discard pile back into a deck
        -:  615:    int i;
        -:  616:    //Move discard to deck
    12175:  617:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    12019:  618:      state->deck[player][i] = state->discard[player][i];
    12019:  619:      state->discard[player][i] = -1;
        -:  620:    }
        -:  621:
      156:  622:    state->deckCount[player] = state->discardCount[player];
      156:  623:    state->discardCount[player] = 0;//Reset discard
        -:  624:
        -:  625:    //Shufffle the deck
      156:  626:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  627:   
        -:  628:    if (DEBUG){//Debug statements
        -:  629:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  630:    }
        -:  631:    
      156:  632:    state->discardCount[player] = 0;
        -:  633:
        -:  634:    //Step 2 Draw Card
      156:  635:    count = state->handCount[player];//Get current player's hand count
        -:  636:    
        -:  637:    if (DEBUG){//Debug statements
        -:  638:      printf("Current hand count: %d\n", count);
        -:  639:    }
        -:  640:    
      156:  641:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  642:
      156:  643:    if (deckCounter == 0)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
      102:  644:      return -1;
        -:  645:
       54:  646:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       54:  647:    state->deckCount[player]--;
       54:  648:    state->handCount[player]++;//Increment hand count
        -:  649:  }
        -:  650:
        -:  651:  else{
    46728:  652:    int count = state->handCount[player];//Get current hand count for player
        -:  653:    int deckCounter;
        -:  654:    if (DEBUG){//Debug statements
        -:  655:      printf("Current hand count: %d\n", count);
        -:  656:    }
        -:  657:
    46728:  658:    deckCounter = state->deckCount[player];//Create holder for the deck count
    46728:  659:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    46728:  660:    state->deckCount[player]--;
    46728:  661:    state->handCount[player]++;//Increment hand count
        -:  662:  }
        -:  663:
    46782:  664:  return 0;
        -:  665:}
        -:  666:
function getCost called 3924 returned 100% blocks executed 93%
     3924:  667:int getCost(int cardNumber)
        -:  668:{
     3924:  669:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 4%
branch  6 taken 3%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 5%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 3%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 0%
branch 27 taken 0%
        -:  670:    {
        -:  671:    case curse:
      160:  672:      return 0;
        -:  673:    case estate:
      148:  674:      return 2;
        -:  675:    case duchy:
      164:  676:      return 5;
        -:  677:    case province:
      124:  678:      return 8;
        -:  679:    case copper:
      110:  680:      return 0;
        -:  681:    case silver:
      166:  682:      return 3;
        -:  683:    case gold:
      120:  684:      return 6;
        -:  685:    case adventurer:
      150:  686:      return 6;
        -:  687:    case council_room:
      148:  688:      return 5;
        -:  689:    case feast:
      152:  690:      return 4;
        -:  691:    case gardens:
      176:  692:      return 4;
        -:  693:    case mine:
      142:  694:      return 5;
        -:  695:    case remodel:
      162:  696:      return 4;
        -:  697:    case smithy:
      154:  698:      return 4;
        -:  699:    case village:
      190:  700:      return 3;
        -:  701:    case baron:
      166:  702:      return 4;
        -:  703:    case great_hall:
      142:  704:      return 3;
        -:  705:    case minion:
      108:  706:      return 5;
        -:  707:    case steward:
      170:  708:      return 3;
        -:  709:    case tribute:
      152:  710:      return 5;
        -:  711:    case ambassador:
      150:  712:      return 3;
        -:  713:    case cutpurse:
      154:  714:      return 4;
        -:  715:    case embargo: 
      148:  716:      return 2;
        -:  717:    case outpost:
      144:  718:      return 5;
        -:  719:    case salvager:
      158:  720:      return 4;
        -:  721:    case sea_hag:
      166:  722:      return 4;
        -:  723:    case treasure_map:
    #####:  724:      return 4;
        -:  725:    }
        -:  726:	
    #####:  727:  return -1;
        -:  728:}
        -:  729:
function cardEffect called 6000 returned 100% blocks executed 6%
     6000:  730:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  731:{
        -:  732:  int i;
        -:  733:  int j;
        -:  734:  int k;
        -:  735:  int x;
        -:  736:  int index;
     6000:  737:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     6000:  738:  int nextPlayer = currentPlayer + 1;
        -:  739:
     6000:  740:  int tributeRevealedCards[2] = {-1, -1};
        -:  741:  int temphand[MAX_HAND];// moved above the if statement
        -:  742:  //int drawntreasure=0;
        -:  743:  //int cardDrawn;
        -:  744:  //int z = 0;// this is the counter for the temp hand
     6000:  745:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  746:    nextPlayer = 0;
        -:  747:  }
        -:  748:  
        -:  749:	
        -:  750:  //uses switch to select card and perform actions
     6000:  751:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 33%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 33%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  752:    {
        -:  753:    case adventurer:
     2000:  754:      adventurerAction(currentPlayer, state);
call    0 returned 100%
     2000:  755:      return 0;
        -:  756:			
        -:  757:    case council_room:
    #####:  758:			councilRoomAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  759:      return 0;
        -:  760:			
        -:  761:    case feast:
        -:  762:      //gain card with cost up to 5
        -:  763:      //Backup hand
    #####:  764:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  765:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  766:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  767:      }
        -:  768:      //Backup hand
        -:  769:
        -:  770:      //Update Coins for Buy
    #####:  771:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  772:      x = 1;//Condition to loop on
    #####:  773:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  774:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  775:	  if (DEBUG)
        -:  776:	    printf("None of that card left, sorry!\n");
        -:  777:
        -:  778:	  if (DEBUG){
        -:  779:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  780:	  }
        -:  781:	}
    #####:  782:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  783:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  784:
        -:  785:	  if (DEBUG){
        -:  786:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  787:	  }
        -:  788:	}
        -:  789:	else{
        -:  790:
        -:  791:	  if (DEBUG){
        -:  792:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  793:	  }
        -:  794:
    #####:  795:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  796:	  x = 0;//No more buying cards
        -:  797:
        -:  798:	  if (DEBUG){
        -:  799:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  800:	  }
        -:  801:
        -:  802:	}
        -:  803:      }     
        -:  804:
        -:  805:      //Reset Hand
    #####:  806:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  807:	state->hand[currentPlayer][i] = temphand[i];
    #####:  808:	temphand[i] = -1;
        -:  809:      }
        -:  810:      //Reset Hand
        -:  811:      			
    #####:  812:      return 0;
        -:  813:			
        -:  814:    case gardens:
    #####:  815:      return -1;
        -:  816:			
        -:  817:    case mine:
    #####:  818:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  819:
    #####:  820:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  821:	{
    #####:  822:	  return -1;
        -:  823:	}
        -:  824:		
    #####:  825:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  826:	{
    #####:  827:	  return -1;
        -:  828:	}
        -:  829:
    #####:  830:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  836:
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  839:
        -:  840:      //discard trashed card
    #####:  841:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  842:	{
    #####:  843:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  846:	      break;
        -:  847:	    }
        -:  848:	}
        -:  849:			
    #####:  850:      return 0;
        -:  851:			
        -:  852:    case remodel:
    #####:  853:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  864:
        -:  865:      //discard trashed card
    #####:  866:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  867:	{
    #####:  868:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  869:	    {
    #####:  870:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  871:	      break;
        -:  872:	    }
        -:  873:	}
        -:  874:
        -:  875:
    #####:  876:      return 0;
        -:  877:		
        -:  878:    case smithy:
    #####:  879:      smithyAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  880:      return 0;
        -:  881:		
        -:  882:    case village:
    #####:  883:      villageAction(currentPlayer, state, handPos);
call    0 never executed
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case baron:
    #####:  887:      state->numBuys++;//Increase buys by 1!
    #####:  888:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  889:      int p = 0;//Iterator for hand!
    #####:  890:      int card_not_discarded = 1;//Flag for discard set!
    #####:  891:      while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  892:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  893:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  894:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  895:          state->discardCount[currentPlayer]++;
    #####:  896:          for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  897:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  898:          }
    #####:  899:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  900:          state->handCount[currentPlayer]--;
    #####:  901:          card_not_discarded = 0;//Exit the loop
        -:  902:        }
    #####:  903:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  904:	    if(DEBUG) {
        -:  905:	      printf("No estate cards in your hand, invalid choice\n");
        -:  906:	      printf("Must gain an estate if there are any\n");
        -:  907:	    }
    #####:  908:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  909:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  910:	      state->supplyCount[estate]--;//Decrement estates
    #####:  911:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  912:		isGameOver(state);
call    0 never executed
        -:  913:	      }
        -:  914:	    }
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
        -:  917:			    
        -:  918:	  else{
    #####:  919:	    p++;//Next card
        -:  920:	  }
        -:  921:	}
        -:  922:      }
        -:  923:			    
        -:  924:      else{
    #####:  925:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  927:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  928:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  929:	    isGameOver(state);
call    0 never executed
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:	    
        -:  934:      
    #####:  935:      return 0;
        -:  936:		
        -:  937:    case great_hall:
     2000:  938:      greatHallAction(currentPlayer, state, handPos);
call    0 returned 100%
     2000:  939:      return 0;
        -:  940:		
        -:  941:    case minion:
        -:  942:      //+1 action
    #####:  943:      state->numActions++;
        -:  944:			
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  947:			
    #####:  948:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  949:	{
    #####:  950:	  state->coins = state->coins + 2;
        -:  951:	}
        -:  952:			
    #####:  953:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  954:	{
        -:  955:	  //discard hand
    #####:  956:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  957:	    {
    #####:  958:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  959:	    }
        -:  960:				
        -:  961:	  //draw 4
    #####:  962:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  963:	    {
    #####:  964:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  965:	    }
        -:  966:				
        -:  967:	  //other players discard hand and redraw if hand size > 4
    #####:  968:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  969:	    {
    #####:  970:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  971:		{
    #####:  972:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  973:		    {
        -:  974:		      //discard hand
    #####:  975:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  976:			{
    #####:  977:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  978:			}
        -:  979:							
        -:  980:		      //draw 4
    #####:  981:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  982:			{
    #####:  983:			  drawCard(i, state);
call    0 never executed
        -:  984:			}
        -:  985:		    }
        -:  986:		}
        -:  987:	    }
        -:  988:				
        -:  989:	}
    #####:  990:      return 0;
        -:  991:		
        -:  992:    case steward:
    #####:  993:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  994:	{
        -:  995:	  //+2 cards
    #####:  996:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  997:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  998:	}
    #####:  999:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
        -: 1001:	  //+2 coins
    #####: 1002:	  state->coins = state->coins + 2;
        -: 1003:	}
        -: 1004:      else
        -: 1005:	{
        -: 1006:	  //trash 2 cards in hand
    #####: 1007:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1008:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1009:	}
        -: 1010:			
        -: 1011:      //discard card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case tribute:
    #####: 1016:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1017:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	  state->deckCount[nextPlayer]--;
        -: 1020:	}
    #####: 1021:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1023:	  state->discardCount[nextPlayer]--;
        -: 1024:	}
        -: 1025:	else{
        -: 1026:	  //No Card to Reveal
        -: 1027:	  if (DEBUG){
        -: 1028:	    printf("No cards to reveal\n");
        -: 1029:	  }
        -: 1030:	}
        -: 1031:      }
        -: 1032:	    
        -: 1033:      else{
    #####: 1034:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1035:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1036:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1037:	    state->deckCount[nextPlayer]++;
    #####: 1038:	    state->discard[nextPlayer][i] = -1;
    #####: 1039:	    state->discardCount[nextPlayer]--;
        -: 1040:	  }
        -: 1041:			    
    #####: 1042:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1043:	} 
    #####: 1044:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1045:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1046:	state->deckCount[nextPlayer]--;
    #####: 1047:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
        -: 1050:      }    
        -: 1051:		       
    #####: 1052:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1053:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1054:	state->playedCardCount++;
    #####: 1055:	tributeRevealedCards[1] = -1;
        -: 1056:      }
        -: 1057:
    #####: 1058:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1059:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1060:	  state->coins += 2;
        -: 1061:	}
        -: 1062:		    
    #####: 1063:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1064:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1065:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1066:	}
        -: 1067:	else{//Action Card
    #####: 1068:	  state->numActions = state->numActions + 2;
        -: 1069:	}
        -: 1070:      }
        -: 1071:	    
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case ambassador:
    #####: 1075:      j = 0;		//used to check if player has enough cards to discard
        -: 1076:
    #####: 1077:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1078:	{
    #####: 1079:	  return -1;				
        -: 1080:	}
        -: 1081:
    #####: 1082:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1083:	{
    #####: 1084:	  return -1;
        -: 1085:	}
        -: 1086:
    #####: 1087:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1090:	    {
    #####: 1091:	      j++;
        -: 1092:	    }
        -: 1093:	}
    #####: 1094:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
        -: 1099:      if (DEBUG) 
        -: 1100:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1101:
        -: 1102:      //increase supply count for choosen card by amount being discarded
    #####: 1103:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1104:			
        -: 1105:      //each other player gains a copy of revealed card
    #####: 1106:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:	{
    #####: 1108:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1109:	    {
    #####: 1110:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1111:	    }
        -: 1112:	}
        -: 1113:
        -: 1114:      //discard played card from hand
    #####: 1115:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1116:
        -: 1117:      //trash copies of cards returned to supply
    #####: 1118:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:	    {
    #####: 1122:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1123:		{
    #####: 1124:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1125:		  break;
        -: 1126:		}
        -: 1127:	    }
        -: 1128:	}			
        -: 1129:
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case cutpurse:
        -: 1133:
    #####: 1134:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1136:	{
    #####: 1137:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1138:	    {
    #####: 1139:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1140:		{
    #####: 1141:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1142:		    {
    #####: 1143:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1144:		      break;
        -: 1145:		    }
    #####: 1146:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1147:		    {
    #####: 1148:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1149:			{
        -: 1150:			  if (DEBUG)
        -: 1151:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1152:			}	
    #####: 1153:		      break;
        -: 1154:		    }		
        -: 1155:		}
        -: 1156:					
        -: 1157:	    }
        -: 1158:				
        -: 1159:	}				
        -: 1160:
        -: 1161:      //discard played card from hand
    #####: 1162:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:		
        -: 1167:    case embargo: 
        -: 1168:      //+2 Coins
    #####: 1169:      state->coins = state->coins + 2;
        -: 1170:			
        -: 1171:      //see if selected pile is in play
    #####: 1172:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1173:	{
    #####: 1174:	  return -1;
        -: 1175:	}
        -: 1176:			
        -: 1177:      //add embargo token to selected supply pile
    #####: 1178:      state->embargoTokens[choice1]++;
        -: 1179:			
        -: 1180:      //trash card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case outpost:
        -: 1185:      //set outpost flag
    #####: 1186:      state->outpostPlayed++;
        -: 1187:			
        -: 1188:      //discard card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case salvager:
        -: 1193:      //+1 buy
     2000: 1194:      state->numBuys++;
     2000: 1195:      if (choice1)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
     1962: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1199:	  //trash card
     1962: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
     2000: 1204:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2000: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1209:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
function discardCard called 5962 returned 100% blocks executed 100%
     5962: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:  //if card is not trashed, added to Played pile 
     5962: 1254:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1255:    {
        -: 1256:      //add card to played pile
     4000: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4000: 1258:      state->playedCardCount++;
        -: 1259:    }
        -: 1260:	
        -: 1261:  //set played card to -1
     5962: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:	
        -: 1264:  //remove card from player's hand
     5962: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
       64: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
     5898: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
        2: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:  else 	
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
     5896: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
     5896: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
     5896: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:	
     5962: 1285:  return 0;
        -: 1286:}
        -: 1287:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:	
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
        -: 1312:    }
        -: 1313:  else
        -: 1314:    {
    #####: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //decrease number in supply pile
    #####: 1320:  state->supplyCount[supplyPos]--;
        -: 1321:	 
    #####: 1322:  return 0;
        -: 1323:}
        -: 1324:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:	
        -: 1329:  //reset coin count
        3: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
       18: 1333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1334:    {
       15: 1335:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1336:	{
       12: 1337:	  state->coins += 1;
        -: 1338:	}
        3: 1339:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1340:	{
    #####: 1341:	  state->coins += 2;
        -: 1342:	}
        3: 1343:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1344:	{
    #####: 1345:	  state->coins += 3;
        -: 1346:	}	
        -: 1347:    }	
        -: 1348:
        -: 1349:  //add bonus
        3: 1350:  state->coins += bonus;
        -: 1351:
        3: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
